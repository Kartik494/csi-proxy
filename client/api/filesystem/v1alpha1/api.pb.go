// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package v1alpha1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	api "github.com/kubernetes-csi/csi-proxy/client/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PathExistsRequest struct {
	// The path to check in the host file system.
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PathExistsRequest) Reset()         { *m = PathExistsRequest{} }
func (m *PathExistsRequest) String() string { return proto.CompactTextString(m) }
func (*PathExistsRequest) ProtoMessage()    {}
func (*PathExistsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *PathExistsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PathExistsRequest.Unmarshal(m, b)
}
func (m *PathExistsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PathExistsRequest.Marshal(b, m, deterministic)
}
func (m *PathExistsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathExistsRequest.Merge(m, src)
}
func (m *PathExistsRequest) XXX_Size() int {
	return xxx_messageInfo_PathExistsRequest.Size(m)
}
func (m *PathExistsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PathExistsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PathExistsRequest proto.InternalMessageInfo

func (m *PathExistsRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type PathExistsResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// present iff success is false
	CmdletError          *api.CmdletError `protobuf:"bytes,2,opt,name=cmdlet_error,json=cmdletError,proto3" json:"cmdlet_error,omitempty"`
	Exists               bool             `protobuf:"varint,4,opt,name=exists,proto3" json:"exists,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PathExistsResponse) Reset()         { *m = PathExistsResponse{} }
func (m *PathExistsResponse) String() string { return proto.CompactTextString(m) }
func (*PathExistsResponse) ProtoMessage()    {}
func (*PathExistsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *PathExistsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PathExistsResponse.Unmarshal(m, b)
}
func (m *PathExistsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PathExistsResponse.Marshal(b, m, deterministic)
}
func (m *PathExistsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathExistsResponse.Merge(m, src)
}
func (m *PathExistsResponse) XXX_Size() int {
	return xxx_messageInfo_PathExistsResponse.Size(m)
}
func (m *PathExistsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PathExistsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PathExistsResponse proto.InternalMessageInfo

func (m *PathExistsResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PathExistsResponse) GetCmdletError() *api.CmdletError {
	if m != nil {
		return m.CmdletError
	}
	return nil
}

func (m *PathExistsResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func init() {
	proto.RegisterType((*PathExistsRequest)(nil), "v1alpha1.PathExistsRequest")
	proto.RegisterType((*PathExistsResponse)(nil), "v1alpha1.PathExistsResponse")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 247 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0xbf, 0x4f, 0x02, 0x31,
	0x14, 0x16, 0x43, 0x10, 0x1e, 0x0e, 0xfa, 0x06, 0x73, 0x41, 0x07, 0x72, 0x8b, 0x2c, 0xb4, 0x01,
	0x46, 0x47, 0x83, 0x89, 0x9b, 0xb9, 0xc5, 0xd1, 0xf4, 0xea, 0x8b, 0xd7, 0x78, 0x77, 0xad, 0x7d,
	0xef, 0x0c, 0xc4, 0x7f, 0xde, 0x50, 0x24, 0x98, 0xe8, 0xd6, 0xaf, 0xef, 0xcb, 0xf7, 0x0b, 0x46,
	0x26, 0x38, 0x15, 0xa2, 0x17, 0x8f, 0xc3, 0xcf, 0x85, 0xa9, 0x43, 0x65, 0x16, 0x93, 0xbb, 0x37,
	0x27, 0x55, 0x57, 0x2a, 0xeb, 0x1b, 0xfd, 0xde, 0x95, 0x14, 0x5b, 0x12, 0xe2, 0xb9, 0x65, 0xa7,
	0x2d, 0xbb, 0x79, 0x88, 0x7e, 0xb3, 0xd5, 0xb6, 0x76, 0xd4, 0x8a, 0x36, 0xc1, 0x69, 0x8a, 0xd1,
	0x47, 0xde, 0xcb, 0xe4, 0xb7, 0x70, 0xf9, 0x64, 0xa4, 0x5a, 0x6f, 0x1c, 0x0b, 0x17, 0xf4, 0xd1,
	0x11, 0x0b, 0x22, 0xf4, 0x83, 0x91, 0x2a, 0xeb, 0x4d, 0x7b, 0xb3, 0x51, 0x91, 0xde, 0xf9, 0x17,
	0xe0, 0x6f, 0x22, 0x07, 0xdf, 0x32, 0x61, 0x06, 0x67, 0xdc, 0x59, 0x4b, 0xcc, 0x89, 0x3c, 0x2c,
	0x0e, 0x10, 0x57, 0x70, 0x6e, 0x9b, 0xd7, 0x9a, 0xe4, 0x25, 0xf9, 0x65, 0xa7, 0xd3, 0xde, 0x6c,
	0xbc, 0xbc, 0x50, 0xbb, 0x06, 0xf7, 0xe9, 0xb0, 0xde, 0xfd, 0x17, 0x63, 0x7b, 0x04, 0x78, 0x05,
	0x03, 0x4a, 0x06, 0x59, 0x3f, 0xa9, 0xfd, 0xa0, 0xe5, 0x33, 0xc0, 0x83, 0xab, 0x89, 0xb7, 0x2c,
	0xd4, 0xe0, 0x23, 0xc0, 0x31, 0x0a, 0x5e, 0xab, 0xc3, 0x12, 0xea, 0x4f, 0x93, 0xc9, 0xcd, 0xff,
	0xc7, 0x7d, 0xfa, 0xfc, 0xa4, 0x1c, 0xa4, 0x15, 0x56, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x04,
	0x82, 0x80, 0x4f, 0x59, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FilesystemClient is the client API for Filesystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FilesystemClient interface {
	// PathExists checks if the given path exists on the host.
	PathExists(ctx context.Context, in *PathExistsRequest, opts ...grpc.CallOption) (*PathExistsResponse, error)
}

type filesystemClient struct {
	cc *grpc.ClientConn
}

func NewFilesystemClient(cc *grpc.ClientConn) FilesystemClient {
	return &filesystemClient{cc}
}

func (c *filesystemClient) PathExists(ctx context.Context, in *PathExistsRequest, opts ...grpc.CallOption) (*PathExistsResponse, error) {
	out := new(PathExistsResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.Filesystem/PathExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesystemServer is the server API for Filesystem service.
type FilesystemServer interface {
	// PathExists checks if the given path exists on the host.
	PathExists(context.Context, *PathExistsRequest) (*PathExistsResponse, error)
}

// UnimplementedFilesystemServer can be embedded to have forward compatible implementations.
type UnimplementedFilesystemServer struct {
}

func (*UnimplementedFilesystemServer) PathExists(ctx context.Context, req *PathExistsRequest) (*PathExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PathExists not implemented")
}

func RegisterFilesystemServer(s *grpc.Server, srv FilesystemServer) {
	s.RegisterService(&_Filesystem_serviceDesc, srv)
}

func _Filesystem_PathExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).PathExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.Filesystem/PathExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).PathExists(ctx, req.(*PathExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Filesystem_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha1.Filesystem",
	HandlerType: (*FilesystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PathExists",
			Handler:    _Filesystem_PathExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
