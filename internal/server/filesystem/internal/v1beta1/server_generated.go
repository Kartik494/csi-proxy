// Code generated by csi-proxy-api-gen. DO NOT EDIT.

package v1beta1

import (
	"context"

	"github.com/kubernetes-csi/csi-proxy/client/api/filesystem/v1beta1"
	"github.com/kubernetes-csi/csi-proxy/client/apiversion"
	"github.com/kubernetes-csi/csi-proxy/internal/server/filesystem/internal"
	"google.golang.org/grpc"
)

var version = apiversion.NewVersionOrPanic("v1beta1")

type versionedAPI struct {
	apiGroupServer internal.ServerInterface
}

func NewVersionedServer(apiGroupServer internal.ServerInterface) internal.VersionedAPI {
	return &versionedAPI{
		apiGroupServer: apiGroupServer,
	}
}

func (s *versionedAPI) Register(grpcServer *grpc.Server) {
	v1beta1.RegisterFilesystemServer(grpcServer, s)
}

func (s *versionedAPI) IsMountPoint(context context.Context, versionedRequest *v1beta1.IsMountPointRequest) (*v1beta1.IsMountPointResponse, error) {
	request := &internal.IsMountPointRequest{}
	if err := Convert_v1beta1_IsMountPointRequest_To_internal_IsMountPointRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.IsMountPoint(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta1.IsMountPointResponse{}
	if err := Convert_internal_IsMountPointResponse_To_v1beta1_IsMountPointResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) LinkPath(context context.Context, versionedRequest *v1beta1.LinkPathRequest) (*v1beta1.LinkPathResponse, error) {
	request := &internal.LinkPathRequest{}
	if err := Convert_v1beta1_LinkPathRequest_To_internal_LinkPathRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.LinkPath(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta1.LinkPathResponse{}
	if err := Convert_internal_LinkPathResponse_To_v1beta1_LinkPathResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) Mkdir(context context.Context, versionedRequest *v1beta1.MkdirRequest) (*v1beta1.MkdirResponse, error) {
	request := &internal.MkdirRequest{}
	if err := Convert_v1beta1_MkdirRequest_To_internal_MkdirRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.Mkdir(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta1.MkdirResponse{}
	if err := Convert_internal_MkdirResponse_To_v1beta1_MkdirResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) PathExists(context context.Context, versionedRequest *v1beta1.PathExistsRequest) (*v1beta1.PathExistsResponse, error) {
	request := &internal.PathExistsRequest{}
	if err := Convert_v1beta1_PathExistsRequest_To_internal_PathExistsRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.PathExists(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta1.PathExistsResponse{}
	if err := Convert_internal_PathExistsResponse_To_v1beta1_PathExistsResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) Rmdir(context context.Context, versionedRequest *v1beta1.RmdirRequest) (*v1beta1.RmdirResponse, error) {
	request := &internal.RmdirRequest{}
	if err := Convert_v1beta1_RmdirRequest_To_internal_RmdirRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.Rmdir(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta1.RmdirResponse{}
	if err := Convert_internal_RmdirResponse_To_v1beta1_RmdirResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}
